# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
#
# The Configuration file for a Seisflows-plugin run with Pyatoa
#
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
# 
# Logging can be: info, debug or None 
#
set_logging: info
# ==============================================================================
# Data filtering parameters
#
# :type min_period: float
# :param min_period: minimum filter period in seconds
# :type max_period: float
# :param max_period: maximum filter period in seconds
# :type filter_corners: float
# :param filter_corners: corner of the butterworth filter 
# ==============================================================================
min_period: 10.0
max_period: 30.0
filter_corners: 4.0
# ==============================================================================
# Data preprocessing parameters
#
# :type rotate_to_rtz: bool
# :param rotate_to_rtz: rotate traces from NEZ to RTZ by BAz
# :type unit_output: str
# :param unit_output: desired unit of the observed traces, will be passed to
#   instrument removal step and implemented during conversion from counts
#   available: DISP, VEL, ACC
# :type synthetic_unit: str
# :param synthetic_unit: the unit output specified from Specfem3D, same as above
# :type synthetics_only: bool
# :param synthetics_only: if a synthetic-synthetic case is being run in
#   Seisflows, certain labels and tasks need to be adjusted accordingly
# ==============================================================================
rotate_to_rtz: false
unit_output: DISP
synthetic_unit: DISP
synthetics_only: false
# ==============================================================================
# Misfit quantification parameters
#
# :type pyflex_map: str
# :param pyflex_map: a map to a pre-determined set of Pyflex config params
#   for more info, see: pyatoa.plugins.pyflex_config.set_pyflex_config()
# :type adj_src_type: str
# :param adj_src_type: the misfit definition to be used in Pyadjoint
#   available: cc_traveltime_misfit, multitaper_misfit, waveform_misfit
# :type window_amplitude_ratio: float
# :param window_amplitude_ratio: a Pyatoa parameter to reject windows based on 
#   global peak amplitude ratio, e.g. if set to 0.2, any windows whose peak
#   amplitude is less than or equal to 20% of the global peak amplitude, will be 
#   rejected. This is useful for removing windows around small amplitude 
#   direct arrivals
# :type fix_windows: bool
# :param fix_windows: windows will not be reselected after the first time they
#   are selected.
# ==============================================================================
pyflex_map: default
adj_src_type: cc_traveltime_misfit
window_amplitude_ratio: 0.0
fix_windows: true
# ==============================================================================
# Data fetching parameters
#
# :type client: str
# :param client: Client name to be fed to Obspy FDSN queries for data fetching
# :type zero_pad: int
# :param zero_pad: seconds to zero pad front and back of data, useful for 
#   avoiding impulsive onsets due to e.g. very small source-receiver distances
# :type start_pad: int
# :param start_pad: seconds to pad the front of retrieved observation data,
#   observation data will eventually be trimmed to the start/end time of
#   synthetics, so only a short amount of time should be necessary
# :type end_pad: int
# :param end_pad: seconds to pad end of retrieved observation data,
#   should be long enough to ensure capture of all seismic phases, and to match
#   the length of synthetic data
# :type cfgpaths: dict of lists
# :param cfgpaths: list of paths to specific categories that Pyatoa will search
#   during data retrieval. For more detail, see
#   pyatoa.core.Config
# ==============================================================================
client: GEONET
zero_pad: 0
start_pad: 20
end_pad: 500
cfgpaths:
  waveforms: []
  synthetics: []
  responses: []
# ==============================================================================
# Plotting parameters
#
# :type map_corners: null or dict of floats
# :param map_corners: the map corners to be passed to mapping toolbox, should be
#   in the form {'lat_min': a, 'lat_max': b, 'lon_min': c, 'lon_max': d}
# :type create_srcrcv_vtk: bool
# :param create_srcrcv_vtk: generate .vtk files of source and receiver locations
#   useful for visualization of kernels and model updates
# :type plot_*: bool
# :param plot_*: plot the given quantity, if false, plotting will be skipped
# :type tile_and_combine: bool
# :param tile_and_combine: if plot_waveforms == plot_maps == true and this 
#   quantity is set true, then map and waveform plots will be tiled together and
#   combined into a single .pdf for a given event, model and step. This reduces 
#   the number of output files
# :type purge_originals: bool
# :param purge_originals: if tile_and_combine == true, purge the original 
#   waveform and map figures to save on disk space
# :type purge_tiles: bool
# :param purge_tiles: if tile_and_combine == true, purge the intermediate tiled
#   images that will be combined into the .pdf
# ==============================================================================
map_corners: null
create_srcrcv_vtk: true
plot_waveforms: true
plot_maps: true
plot_misfit_maps: true
tile_and_combine: true
purge_originals: true
purge_tiles: true
# ==============================================================================
# Seisflows
#
# :type snapshot: bool
# :param snapshot: save a copy of the pyasdf HDF5 files before manipulating 
#   them. Due to their complex structure, file corruption of the HDF5 files is 
#   possible, which will lead to loss of all data for a given event. Snapshots
#   allow for saving the most recent version of an HDF5 file, so that if 
#   corruption occurs, the workflow need only be restarted from the last 
#   iteration
# :type write_misfit_json: bool
# :param write_misfit_json: creates a .json file containing the number of 
#   measurements and the total misfit for each event, model and step. This file
#   is useful for aggregating misfit information for visualization, etc.
# ==============================================================================
snapshot: true
write_misfit_json: true

