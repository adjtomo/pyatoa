"""
Utility functions for manipulating image files such as .png and .pdfs, using the
Python Pillow package
"""
from PIL import Image


def tile_imgs(fids, fid_out):
    """
    Combine a list of images into a single, horizontally tiled image.

    :type fids: list
    :param fids: list of file ids with full pathnames to be tiled
    :type fid_out: str
    :param fid_out: the name of the file to be saved with full pathname
    """
    # .png files require conversion to properly get the alpha layer
    images = []
    for fid in fids:
        images.append(Image.open(fid).convert("RGBA"))

    widths, heights = zip(*(i.size for i in images))
    total_width = sum(widths)
    max_height = max(heights)

    # Create the new image that will be returned
    im_out = Image.new(mode="RGBA", size=(total_width, max_height))
    x_offset = 0
    for im in images:
        im_out.paste(im=im, box=(x_offset, 0))
        x_offset += im.size[0]

    im_out.save(fid_out)


def imgs_to_pdf(fids, fid_out):
    """
    Combine a list of image files into a single PDF document

    :type fids: list
    :param fids: list of file ids with full pathnames to be combined
    :type fid_out: str
    :param fid_out: the name of the file to be saved with full pathname
    """
    images = []
    for fid in fids:
        images.append(Image.open(fid).convert("RGB"))

    image_main = images[0]
    images = images[1:]

    image_main.save(fp=fid_out, format="PDF", resolution=100., save_all=True,
                    append_images=images)


def tile_combine_imgs(ds, wavs_path, maps_path, save_pdf_to,
                      sort_by="baz", purge_wavs=False, purge_tiles=False):
    """
    Utility function to tile and combine the output figures from the workflow.
    Tiles maps and waveform plots together, and then combines them into a
    composite pdf. Options to delete intermediate files. This function is useful
    for cutting down on the number of files generated by Pyatoa.

    Maps should not be purged because they can be used by future workflows

    :type ds: pyasdf.ASDFDataSet
    :param ds: dataset used for sorting
    :type wavs_path: str
    :param wavs_path: path to the waveform figures
    :type maps_path: str
    :param maps_path: path to the map figures
    :type save_pdf_to: str
    :param save_pdf_to: path and filename to save final PDF file
    :type sort_by: str
    :param sort_by: method to sort stations by when combining into a pdf,
        available: 'baz', 'misfit' (misfit not implemented)
    :type purge_wavs: bool
    :param purge_wavs: delete the waveform files after tiling them
    :type purge_tiles: bool
    :param purge_tiles: delete the tile files after combining into pdf
    :return:
    """
    # Intra-function imports because this is usually only called once in a while
    from pyatoa.utils.srcrcv import sort_by_backazimuth

    # Set the template filenames to look for/ use
    wav_fid = "wav_{sta}.png"
    map_fid = "map_{sta}.png"
    tile_fid = "tile_{sta}.png"

    # Get station names from waveforms. Maps will be named similarly
    files = glob.glob(os.path.join(wavs_path, wav_fid.format(sta="*")))
    stanames = []
    for f in files:
        sta = os.path.basename(f).split("_")[1].split(".")[0]
        stanames.append(sta)
    stanames = set(stanames)
    stanames = list(stanames)

    # combine map and waveform figures into tiles
    tile_names = []
    for sta in stanames:
        wav_name = os.path.join(wavs_path, wav_fid.format(sta=sta))
        map_name = os.path.join(maps_path, map_fid.format(sta=sta))
        tile_name = os.path.join(wavs_path, tile_fid.format(sta=sta))

        if os.path.exists(map_name) and os.path.exists(wav_name):
            tile_imgs(fids=[map_name, wav_name], fid_out=tile_name)
            tile_names.append(tile_name)
        else:
            raise FileNotFoundError(
                f"Either {wav_name} or {map_name} doesn't exist when it should")

    # remove old waveform images
    if purge_wavs:
        for f in files:
            os.remove(f)

    # combine the tiles into a single .pdf
    # sort stations by backazimuth for easier visualization
    if sort_by:
        if sort_by == "baz":
            sorted_station_names = sort_by_backazimuth(ds)
        # Sort by largest to smallest misfit
        elif sort_by == "misfit":
            raise NotImplementedError

        # Sort the tile names based on the sort method
        tile_names_sorted = []
        for name in sorted_station_names:
            net, sta = name.split('.')
            for tile in tile_names:
                if sta in tile:
                    tile_names_sorted.append(tile)
        tile_names = tile_names_sorted

    # Create the pdf
    imgs_to_pdf(fids=tile_names, fid_out=save_pdf_to)

    # Remove tiles
    if purge_tiles:
        for tile in tile_names:
            os.remove(tile)


