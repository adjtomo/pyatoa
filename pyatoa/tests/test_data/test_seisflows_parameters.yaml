# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#                 Created 13.07.20 for Pyatoa test data
#
#                 Seisflows YAML Parameter File and Path Input
#
#   variables set to '', or `null`, will be ignored and set to default values 
#
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#
#                                    MODULES                                  
#
# These modules correspond to the structure of the source code, determining
# which modules are loaded at runtime. Each of these modules may also 
# correspond to a sub-set of parameters below, which in turn may have custom
# parameters that relate to overwritten/super'd modules
# 
#
# PARAMETERS:
# -----------
# WORKFLOW: The method for running Seisflows
#    inversion, inversion_pyatoa, migration, thrifty_inversion, etc.
# SOLVER: External solver to use
#    specfem2d, specfem3d, specfem3d_globe, specfem3d_pyatoa
# SYSTEM: Computer architecture
#    serial, pbs, slurm, etc.
# OPTIMIZE: Optimization algorithm for the inverse problem
#    steepest_descent, LBFGS, NLCG
# LINESEARCH: Line-search algorithm to be used in optimization
#    Bracket, Backtrack
# PREPROCESS: Preprocessing schema for waveform data
#    base, Pyatoa
# POSTPROCESS: Postprocessing schema for kernel and gradients
#    base
#
# ==============================================================================
WORKFLOW: thrifty_pyatoa
SOLVER: specfem3d_pyatoa
SYSTEM: maui_lg
OPTIMIZE: LBFGS 
LINESEARCH: backtrack
PREPROCESS: base
POSTPROCESS: base

# ==============================================================================
#
#                                   WORKFLOW
#
#           The specific set of instructions for Seisflows to follow
#
# PARAMETERS:
# -----------
# TITLE (str): Name used to submit jobs to the HPC system, defaults to
#              directory name containing this file
# BEGIN (int): First iteration to begin the workflow on, counting from 1
# END (int):   Last iteration in the workflow, must have END >= BEGIN
# NSRC (int):  Number of sources to use in the workflow. Available sources will
#              be gathered and sorted from the DATA directory
#
# ==============================================================================
TITLE: pyatoa_test
BEGIN: 1
END: 1

# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# 
#                       CUSTOM WORKFLOW: inversion_pyatoa
#
# PARAMETERS:
# -----------
# RESUME_FROM (str): Resume a workflow from a given task, incase time out or 
#                    error encountered mid-iteration. Parameter must match
#                    method names inside workflow.inversion_pyatoa.main()
# STOP_AT (str):     Stop the workflow after completing the given function
#                    Useful for interogating the inversion mid-iteration
#                    !!! Caution, these are an advanced User parameter, its best 
#                    to just restart the iteration from the beginning to avoid 
#                    creating duplicates or skipping essential functions !!!
#                    Available functions:
#                       initialize, evaluate_gradient, write_gradient
#                       compute_direction, line_search, finalize, clean
#
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
RESUME_FROM: null
STOP_AFTER: null


# ==============================================================================

#                                    SYSTEM
#
#     Parameters used to interact with the compute system running Seisflows
#
# 
# PARAMETERS:
# -----------
# NTASK (int):    Number of tasks specified in submission scripts. 

# NPROC (int):    Number of processors specified in submission scripts
# NODESIZE (int): Number of cores per node set by the system architecture

# TASKTIME (int): Maximum job time for each task within the workflow
# ENVIRONS (str): Comma delimited environment variables to pass to `run`

#
# ==============================================================================
NTASK: 30
NPROC: 80
NODESIZE: 40
WALLTIME: 1400
TASKTIME: 10
ENVIRONS: ''

# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# 
#                           CUSTOM SYSTEM: MauiLg
#
#     Parameters specific to the New Zealand HPC cluster Maui (& Maui_ancil)

# PARAMETERS:
# -----------
# ACCOUNT (str):         NeSI account name
# MAIN_CLUSTER (str):    Cluster to run simulations on, e.g. maui, mahuika
# MAIN_PARTITION (str):  Partition of main cluster to submit jobs to
# ANCIL_CLUSTER (str):   Anciliary cluster for data processing using Pyatoa
# ANCIL_PARTITION (str): Partition of ancilary cluster 
# ANCIL_TASKTIME (int):  For shorter preprocessing tasktimes, 
#                        defaults = TASKTIME
# NODES (int):           Number of nodes to occupy on the cluster, 
#                        usually scales with simulation size
# CPUS_PER_TASK (int):   Multithreading options, default is 1
# SLURMARGS (str):       Extra arguments to put in slurm 'sbatch' script,
#                        should be in format '--arg1=val1 --arg2=val2' etc.
# WITH_OPENMP (bool):    Use OpenMP in job submission scripts
#
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
ACCOUNT: nesi00263
MAIN_CLUSTER: maui
MAIN_PARTITION: nesi_research  
ANCIL_CLUSTER: maui_ancil 
ANCIL_PARTITION: nesi_prepost
ANCIL_TASKTIME: 30
NODES: 2
CPUS_PER_TASK: 1 
SLURMARGS: --hint=nomultithread
WITH_OPENMP: False

# ==============================================================================
#
#                                    SOLVER
#
#          Control the external solver, its inputs and desired outputs
#
#
# PARAMETERS:
# -----------
# CASE (str):      Changes some options, names, for synthetic-synthetic workflow
#                  `Data` for a data-synthetic workflow
#                  `Synthetic` for a synthetic-synthetic workflow
# MATERIALS (str): Choose which parameters are used in the workflow
#                  `Elastic`: Vp, Vs used as model parameters
#                  `Acoustic`: Vp is used as model parameter 
# DENSITY (str):   Update density during inversions
#                  `Variable`: update density
#                  `Constant`: don't update density
# PRECOND (str):   Name of class for User defined preconditioner
# NT (int):        Number of time steps for simulations, must be equal to 
#                  Specfem3D Par_file NSTEP
# DT (float):      Delta, time step. Must be equal Specfem3D Par_file DT
# F0 (float):      Dominant frequency (Specfem2D only)
# SOLVERIO (str):  File type to be used by the solver, Specfem3D allows for 
#                  `fortran_binary` and `adios`
#                  Seisflows only supports `fortran_binary`
#
# ==============================================================================
CASE: Synthetic
MATERIALS: Elastic
DENSITY: Constant
PRECOND: None   
NT: 10000 
DT: 0.03
F0: .1  
SOLVERIO: fortran_binary

# ==============================================================================
#
#                                PREPROCESSING
#
#         Parameters related to observed and synthetic waveform processing
#
# PARAMETERS:
# -----------
# FORMAT (str):  Data file formats. Available: `ascii`, `su`
#
# ==============================================================================
FORMAT: ascii 

# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# 
#                          CUSTOM PREPROCESSING: base
#
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
CHANNELS: z              # data channels to be used
NORMALIZE: 0             # normalize tracesi
FILTER: ''               # highpass, lowpass, bandpass
MUTE: 0                  # mute direct arrival
MUTECONST: 0.            # mute constant (for muting early arrivals)
MUTESLOPE: 0.            # mute slope (for muting early arrivals)

# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#
#                        CUSTOM PREPROCESSING: pyatoa
#
#        Parameters related to preprocessing using the package Pyatoa
#        Will be used in the Pyaflowa workflow, or passed to the Config
#
# PARAMETERS:
# -----------
# set_logging (dict):     [null, warning, info, debug]
#                         Control the logging level for each pacakge   
# cfgpaths (dict):        Set paths to search for data stored on disk
#                         default SEED directory structure, or overwrite
# unit_output (str):      [disp, vel, acc] desired units of the observed data
# synthetic_unit (str):   [disp, vel, acc] units of synthetics from Specfem
# min_period (float):     Low corner period in seconds for bandpass filter
# max_period (float):     High corner period in seconds for bandpass filter
# filter_corners (int):   Number of corners in bandpass (default=4)
# rotate_to_rtz (bool):   Rotate from North/East/Z to Radial/Transverse/Z 
# client (str):           ObsPy FDSN client to get data externally 
# start_pad (int):        For observed data, length of data in seconds to get
#                         before origin time. Should match or exceed 
#                         synthetic t0. Should be positive 
# end_pad (int):          Same as start_pad but for after origin time. Should be
#                         longer than PAR.NT * PAR.DT    
# pyflex_preset (str):    Optional preset map for Pyflex, see pyatoa plugins
# adj_src_type (str):     [cc, mt, wav] Adjoint source type for Pyadjoint 
# win_amp_ratio (float):  [0:1] Window amplitude threshold criteria  
# fix_windows (bool/str): [True, False, iter]
#                         True: Fix windows for every function evaluation
#                         False: Evaluate new windows each function evaluation
#                         iter: Evaluate new windows only at new iterations, 
#                               but not during line search
# snapshot (bool):        Periodically duplicate .h5 output files on disk
# srcrcv_vtk (bool):      Generate src.vtk and rcv.vtk files for ParaView
# plot_wav (bool):        Save waveform figures during workflow
# plot_map (bool):        Plot source receiver maps for each pair
# make_pdf (bool):        Combine waveform and map figures into event-wise pdfs
# map_corners (dict):     For mapping, denote the bounds of the Basemap
# 
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
PYATOA:
    set_logging:  
        pyatoa: debug
        pyflex: debug 
        pyadjoint: debug
    cfgpaths:  
        waveforms: []
        responses: ["/scale_wlg_persistent/filesets/project/nesi00263/bchow/\
                     seismic/seed/RESPONSE"]
        synthetics: []

    # OBSPY 
    unit_output: DISP       
    synthetic_unit: DISP    
    min_period: 10.         
    max_period: 30.         
    filter_corners: 4       
    rotate_to_rtz: False    
    client: TEST_CLIENT
    start_pad: 20           
    end_pad: 350           

    # PYFLEX, PYADJOINT
    pyflex_preset: nznorth_10-30s_plus
    adj_src_type: mt
    min_cycle_in_window: 0

    # PYATOA WINDOWING
    win_amp_ratio: 0.0
    fix_windows: False

    # OUTPUT FILES
    snapshot: True     
    srcrcv_vtk: True   

    # PLOTTING
    plot_wav: True     
    plot_map: True
    make_pdf: True
    map_corners:       
        lat_min: -42.5 
        lat_max: -37.0 
        lon_min: 173.0 
        lon_max: 178.5 

# ==============================================================================
#
#                                 POSTPROCESSING
#
#               Tasks related to processing of gradient information
# 
# PARAMETERS:
# -----------
# TASKTIME_SMOOTH (int): Scales the smoothing operation, as this may take longer 
#                        than normal tasktimes. Scaling works as a multiple of
#                        SYSTEM.TASKTIME. Default is 1
# SMOOTH_H (float):      Gaussian std. for smoothing in the horizontal, meters
#                        Smoothing scalelength is ~ sqrt(8) * sigma
# SMOOTH_V (float):      Gaussian std. for smoothing in the vertical, meters
#                        Smoothing scalelength is ~ sqrt(8) * sigma
# SCALE (float):         Scaling factor
#
# ==============================================================================
TASKTIME_SMOOTH: 4
SMOOTH_H: 17500.
SMOOTH_V: 4000.
SCALE: 1.

# ==============================================================================
#
#                                  OPTIMIZATION
#
#       Parameters for control of line search and optimization algorithms
# 
# PARAMETERS:
# -----------
# STEPCOUNTMAX (int):  Maximum allowable trial step lengths. Default=10, min=3
# STEPLENINIT (float): Initial step length guess, fraction of current model
#                      Default = 0.05
# STEPLENMAX (float):  Maximum step length allowed as fraction of current model
#                      Default = 0.5
#
# ==============================================================================
STEPCOUNTMAX: 5
STEPLENINIT: 0.05
STEPLENMAX: 0.5

# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#
#                          CUSTOM OPTIMIZATION: LBFGS
# 
# PARAMETERS:
# -----------
# LBFGSMAX (int):     Periodic LBFGS restart interval. Default = infinity
# LBFGSMEM (int):     Number of previous model updates/ gradients to 
#                     store in memory. Default = 3
# LBFGSTHRES (float): Descent direction threshold. Default = 0.0
#
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
LBFGSMAX: null
LBFGSMEM: null
LBFGSTHRES: null

# ==============================================================================
#
#                               WORKFLOW OUTPUTS
#
# Parameters to control what outputs are stored permanently to disk during work
#
# OPTIONS:
# --------
# SAVEGRADIENT (bool):  Save the gradient from each iteration
# SAVEKERNELS (bool):   Save all kernels (event, misfit) from each iteration
# SAVEMODEL (bool):     Save the final model from each iteration
# SAVE_AS (str):        Format to save gradients, kernels and models
#                       `vector`: saves as .npy files. reduces file count
#                       `binary`: saves as .bin files, used by Specfem
#                       `both`:   saves as both .npy and .bin files
# SAVERESIDUALS (bool): Preprocessing, save waveform residuals
# SAVETRACES (bool):    Preprocessing, save waveforms
# 
# ==============================================================================
SAVEGRADIENT: True
SAVEKERNELS: True
SAVEMODEL: True
SAVEAS: binary  
SAVERESIDUALS: False
SAVETRACES: False

# ==============================================================================
#
#                                    PATHS
#
#    List of paths that are passed to the Seisflows workflow for input/ouput 
#
# PARAMETERS:
# -----------
# SCRATCH:      Scratch directory to store all temporary workflow files
# OUTPUT:       Output directory to store all permanent workflow files
# MODEL_INIT:   Location of initial model for synthetics generation
# MODEL_TRUE:   Location of true model for synthetic-synthetic cases. Optional
# SPECFEM_DATA: Specfem3D `DATA` dir. containing Par_file, events and stations
# SPECFEM_BIN:  Specfem3D `bin` dir. containing Specfem executables
#
# CUSTOM PATHING:
# ---------------
# PYATOA_IO:    Location to store Pyatoa workflow files
#
# ==============================================================================
PATHS:
    SCRATCH: "./scratch"
    OUTPUT: "./output"
    MODEL_INIT: "/nesi/nobackup/nesi00263/bchow/tomo/seisflows/\
                 specfem/nztn/lowres/OUTPUT_FILES_INIT/DATABASES_MPI"
    MODEL_TRUE: "/nesi/nobackup/nesi00263/bchow/tomo/seisflows/\
                 specfem/nztn/lowres/OUTPUT_FILES_CHECKER/DATABASES_MPI"
    SPECFEM_DATA: "./sfDATA"
    SPECFEM_BIN: "/nesi/project/nesi00263/bchow/specfem/specfem3d_75e1785/\
                  bin_75e1785_CrayGNU-19.04_openmp_mpi_vectorization"
    PYATOA_IO: "./pyatoa.io"

