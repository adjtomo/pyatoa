# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#
#                 Seisflows YAML Parameter File and Path Input
#
#   An abridged version of the Seisflows YAML Parameter/Path file for testing
#
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#
# ==============================================================================

# ==============================================================================
#
#                                    SOLVER
#
#          Control the external solver, its inputs and desired outputs
#
#
# PARAMETERS:
# -----------
# CASE (str):      Changes some options, names, for synthetic-synthetic workflow
#                  `Data` for a data-synthetic workflow
#                  `Synthetic` for a synthetic-synthetic workflow
# MATERIALS (str): Choose which parameters are used in the workflow
#                  `Elastic`: Vp, Vs used as model parameters
#                  `Acoustic`: Vp is used as model parameter 
# DENSITY (str):   Update density during inversions
#                  `Variable`: update density
#                  `Constant`: don't update density
# PRECOND (str):   Name of class for User defined preconditioner
# NT (int):        Number of time steps for simulations, must be equal to 
#                  Specfem3D Par_file NSTEP
# DT (float):      Delta, time step. Must be equal Specfem3D Par_file DT
# F0 (float):      Dominant frequency (Specfem2D only)
# SOLVERIO (str):  File type to be used by the solver, Specfem3D allows for 
#                  `fortran_binary` and `adios`
#                  Seisflows only supports `fortran_binary`
#
# ==============================================================================
CASE: Data
MATERIALS: Elastic
DENSITY: Constant
PRECOND: None   
NT: 20000 
DT: 0.015
F0: .1  
SOLVERIO: fortran_binary

# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#
#                        CUSTOM PREPROCESSING: pyatoa
#
#        Parameters related to preprocessing using the package Pyatoa
#        Will be used in the Pyaflowa workflow, or passed to the Config
#
# PARAMETERS:
# -----------
# set_logging (dict):     [null, warning, info, debug]
#                         Control the logging level for each pacakge   
# cfgpaths (dict):        Set paths to search for data stored on disk
#                         default SEED directory structure, or overwrite
# unit_output (str):      [disp, vel, acc] desired units of the observed data
# synthetic_unit (str):   [disp, vel, acc] units of synthetics from Specfem
# min_period (float):     Low corner period in seconds for bandpass filter
# max_period (float):     High corner period in seconds for bandpass filter
# filter_corners (int):   Number of corners in bandpass (default=4)
# rotate_to_rtz (bool):   Rotate from North/East/Z to Radial/Transverse/Z 
# client (str):           ObsPy FDSN client to get data externally 
# start_pad (int):        For observed data, length of data in seconds to get
#                         before origin time. Should match or exceed 
#                         synthetic t0. Should be positive 
# end_pad (int):          Same as start_pad but for after origin time. Should be
#                         longer than PAR.NT * PAR.DT    
# pyflex_preset (str):    Optional preset map for Pyflex, see pyatoa plugins
# adj_src_type (str):     [cc, mt, wav] Adjoint source type for Pyadjoint 
# win_amp_ratio (float):  [0:1] Window amplitude threshold criteria  
# fix_windows (bool/str): [True, False, iter]
#                         True: Fix windows for every function evaluation
#                         False: Evaluate new windows each function evaluation
#                         iter: Evaluate new windows only at new iterations, 
#                               but not during line search
# snapshot (bool):        Periodically duplicate .h5 output files on disk
# srcrcv_vtk (bool):      Generate src.vtk and rcv.vtk files for ParaView
# plot_wav (bool):        Save waveform figures during workflow
# plot_map (bool):        Plot source receiver maps for each pair
# make_pdf (bool):        Combine waveform and map figures into event-wise pdfs
# map_corners (dict):     For mapping, denote the bounds of the Basemap
# 
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
PYATOA:
    cfgpaths:  
        waveforms: []
        responses: []
        synthetics: []

    # PREPROCESSING  
    unit_output: DISP       
    synthetic_unit: DISP    
    min_period: 10.         
    max_period: 30.         
    filter_corners: 4       
    rotate_to_rtz: False    
    client: null          
    start_pad: 20           
    end_pad: 350 

    # PYATOA WINDOWING
    win_amp_ratio: 0.2 

    # EXTERNAL CONFIGS
    pyflex_preset: example
    adj_src_type: cc               

    # PYAFLOWA SPECIFIC
    fix_windows: iter       
    snapshot: True     
    srcrcv_vtk: True   
    plot_wav: True     
    make_pdf: True     
    set_logging:  
        pyatoa: debug
        pyflex: debug 
        pyadjoint: debug
    plot_map: True     
    map_corners:       
        lat_min: -42.5 
        lat_max: -37.0 
        lon_min: 173.0 
        lon_max: 178.5 
